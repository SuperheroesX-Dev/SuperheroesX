import java.util.regex.Matcher
import java.util.regex.Pattern

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'idea'
apply plugin: 'java'

def mod = new Mod(this)

version = mod.VERSION
group = 'com.' + mod.GROUP_ID + '.' + mod.ID // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = mod.ID

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20190215-1.13.1'
    
    runs {
        client = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            mods {
                sx {
                    source sourceSets.main
                }
            }
        }
        server = {
            // recommended logging data for a userdev environment
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            // recommended logging level for the console
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            mods {
                sx {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.13.2-25.0.37'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes(["Specification-Title": "${mod.NAME}",
                    "Specification-Vendor": "${mod.GROUP_ID}",
                    "Specification-Version": "1", // We are version 1 of the modlauncher specification
                    "Implementation-Title": project.name,
                    "Implementation-Version": "${version}",
                    "Implementation-Vendor" :"${mod.GROUP_ID}",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

idea {
    module {
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}

class Mod {

    String ID = project.pullData("MODID")
    String GROUP_ID = ("sx_dev")
    String NAME = project.pullData("NAME")
    String VERSION = project.pullData("VERSION")

    def project
    Mod (def project){
        this.project = project
    }
}

def pullData(String key) {
    File file = file("./src/main/java/com/sx_dev/sx/util/Reference.java")
    String data = ""
    Pattern pattern = Pattern.compile(" {4}public static final String " + key + " = \"([\\d\\.]*)\";\$")
    file.eachLine { String s ->
        Matcher matcher = pattern.matcher(s)
        if (matcher.matches()) {
            data = matcher.group(1)
            return
        }
    }
    return data
}
